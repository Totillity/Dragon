
#macro $( CHECK_NULL($val:expr) )$ => stmt:
       $( if (is_null($val)) {
              print("Is null, terminating");
              exit(0);
          } )$
#endmacro


#macro $( for ($init:stmt $cond:expr; $each:expr) $body:stmt )$ => stmt:
       $( {
              $init
              while ($cond) {
                  $body
                  $each;
              }
          } )$
#endmacro



class Array<T> {
    attr _arr: _Array;
    attr size: int;

    new(size: int) {
        self._arr = new _Array(size);
        self.size = size;
    }

    method get_item(index: int) -> T {
        var obj: Object = self._arr.get_item(index);
        CHECK_NULL(obj)
        return obj as T;
    }

    method set_item(index: int, val: T) -> void {
        self._arr.set_item(index, val);
    }
}



def main() -> int {
    var arr: Array<Integer> = new Array<Integer>(10);

    for (var i: int = 0; i < arr.size; i=i+1) {
        arr.set_item(i, i * 2);
    }

    for (var i: int = 0; i < arr.size; i=i+1) {
        print(arr.get_item(i));
    }

    print("this is working");
    return 0;
}
