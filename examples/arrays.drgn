
# Builtin support for array has not arrived
# In the meantime, this is a great example of generics
# The _Array class is builtin, and has a C implementation found in std_files/list.c
# It defines:
#   * its constructor, which takes a size as an int
#   * get_item(index: int) -> Object, which returns the object at that index
#   * set_item(index: int, val: Object) -> void, which sets that index to val
# But casts must be done to get everything to the right type, as _Array does everything in the base Object type
# Our wrapper Array does that for us through generics

# This macro handles null checks by terminating the program is something is null
#macro $( CHECK_NULL($val:expr) )$ => stmt:
       $( if (is_null($val)) {
              print("Is null, terminating");
              exit(0);
          } )$
#endmacro


#macro $( for ($init:stmt $cond:expr; $each:expr) $body:stmt )$ => stmt:
       $( {
              $init
              while ($cond) {
                  $body
                  $each;
              }
          } )$
#endmacro


class Array<T> {
    attr _arr: _Array;
    attr size: int;

    new(size: int) {
        self._arr = new _Array(size);
        self.size = size;
    }

    method get_item(index: int) -> T {
        var obj: Object = self._arr.get_item(index);
        CHECK_NULL(obj)
        return obj as T;
    }

    method set_item(index: int, val: T) -> void {
        # val is automatically cast to an Object
        self._arr.set_item(index, val);
    }
}


def main() -> int {
    var arr: Array<Integer> = new Array<Integer>(10);

    for (var i: int = 0; i < arr.size; i=i+1) {
        arr.set_item(i, i * 2);
    }

    for (var i: int = 0; i < arr.size; i=i+1) {
        print(arr.get_item(i));
    }

    return 0;
}
